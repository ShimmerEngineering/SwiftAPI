//
//  SensorTest.swift
//  ShimmerBluetoothTests
//
//  Created by Shimmer Engineering on 19/04/2024.
//


import XCTest
@testable import ShimmerBluetooth
import CoreBluetooth

class SensorTest: XCTestCase {
    
    func testSensorWRAccel(){
        var wrAccelSensor: WRAccelSensor = WRAccelSensor()
        var infomwracc:[UInt8] = [ 0x80,0x02,0x01,0xE0,0x20,0x00,0x01,0x9B,0x0D,0x08,0x00,0x80,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x01,0x00,0x80,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x01,0x09,0x00,0x00,0x00,0x08,0xCD,0x08,0xCD,0x08,0xCD,0x00,0x5C,0x00,0x5C,0x00,0x5C,0x00,0x9C,0x00,0x9C,0x00,0x00,0x00,0x00,0x9C,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x96,0x19,0x96,0x19,0x96,0x00,0x9C,0x00,0x9C,0x00,0x00,0x00,0x00,0x9C,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x9B,0x02,0x9B,0x02,0x9B,0x00,0x9C,0x00,0x64,0x00,0x00,0x00,0x00,0x9C,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x87,0x06,0x87,0x06,0x87,0x00,0x9C,0x00,0x64,0x00,0x00,0x00,0x00,0x9C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x53,0x68,0x69,0x6D,0x6D,0x65,0x72,0x5F,0x36,0x38,0x44,0x44,0x44,0x65,0x66,0x61,0x75,0x6C,0x74,0x54,0x72,0x69,0x61,0x6C,0x65,0x54,0x7E,0x40,0x00,0x00,0x31,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ]
        
        infomwracc = wrAccelSensor.updateInfoMemAccelRange(infomem: infomwracc,range: WRAccelSensor.Range.RANGE_16G)
        var wrAccelRange = (Int(infomwracc[ConfigByteLayoutShimmer3.idxConfigSetupByte0]>>ConfigByteLayoutShimmer3.bitShiftLSM303DLHCAccelRange) & ConfigByteLayoutShimmer3.maskLSM303DLHCAccelRange)
        XCTAssertEqual(wrAccelRange, 1, "Failed to set accel range")
        
        infomwracc = wrAccelSensor.updateInfoMemAccelRange(infomem: infomwracc,range: WRAccelSensor.Range.RANGE_2G)
        wrAccelRange = (Int(infomwracc[ConfigByteLayoutShimmer3.idxConfigSetupByte0]>>ConfigByteLayoutShimmer3.bitShiftLSM303DLHCAccelRange) & ConfigByteLayoutShimmer3.maskLSM303DLHCAccelRange)
        XCTAssertEqual(wrAccelRange, 0, "Failed to set accel range")
        
        infomwracc = wrAccelSensor.updateInfoMemAccelRange(infomem: infomwracc,range: WRAccelSensor.Range.RANGE_4G)
        wrAccelRange = (Int(infomwracc[ConfigByteLayoutShimmer3.idxConfigSetupByte0]>>ConfigByteLayoutShimmer3.bitShiftLSM303DLHCAccelRange) & ConfigByteLayoutShimmer3.maskLSM303DLHCAccelRange)
        XCTAssertEqual(wrAccelRange, 2, "Failed to set accel range")
        
        infomwracc = wrAccelSensor.updateInfoMemAccelRange(infomem: infomwracc,range: WRAccelSensor.Range.RANGE_8G)
        wrAccelRange = (Int(infomwracc[ConfigByteLayoutShimmer3.idxConfigSetupByte0]>>ConfigByteLayoutShimmer3.bitShiftLSM303DLHCAccelRange) & ConfigByteLayoutShimmer3.maskLSM303DLHCAccelRange)
        XCTAssertEqual(wrAccelRange, 3, "Failed to set accel range")
        
    }
    
    func testSensorGyroRange(){
        var gyroSensor: GyroSensor = GyroSensor()
        var infomgyro:[UInt8] = [ 0x20, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01, 0x06, 0x01, 0x08, 0x04, 0x88, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x04, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x0B, 0x00, 0x00, 0x00, 0x08, 0xCD, 0x08, 0xCD, 0x08, 0xCD, 0x00, 0x5C, 0x00, 0x5C, 0x00, 0x5C, 0x00, 0x9C, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x96, 0x19, 0x96, 0x19, 0x96, 0x00, 0x9C, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x9B, 0x02, 0x9B, 0x02, 0x9B, 0x00, 0x9C, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x87, 0x06, 0x87, 0x06, 0x87, 0x00, 0x9C, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x68, 0x69, 0x6D, 0x6D, 0x65, 0x72, 0x5F, 0x36, 0x38, 0x44, 0x44, 0x74, 0x72, 0x74, 0x72, 0x74, 0x72, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x66, 0x4C, 0x45, 0xA6, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x47, 0x8F, 0x04, 0xBD, 0xA2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ]
        
        infomgyro = gyroSensor.updateInfoMemGyroRange(infomem: infomgyro,range: GyroSensor.Range.RANGE_250DPS)
        var gyroRange = (Int(infomgyro[ConfigByteLayoutShimmer3.idxConfigSetupByte2] >> ConfigByteLayoutShimmer3.bitShiftMPU9150GyroRange) & ConfigByteLayoutShimmer3.maskMPU9150GyroRange)

        XCTAssertEqual(gyroRange, 0, "Failed to set gyro range")
        
        infomgyro = gyroSensor.updateInfoMemGyroRange(infomem: infomgyro,range: GyroSensor.Range.RANGE_500DPS)
        gyroRange = (Int(infomgyro[ConfigByteLayoutShimmer3.idxConfigSetupByte2] >> ConfigByteLayoutShimmer3.bitShiftMPU9150GyroRange) & ConfigByteLayoutShimmer3.maskMPU9150GyroRange)
        XCTAssertEqual(gyroRange, 1, "Failed to set gyro range")
        
        infomgyro = gyroSensor.updateInfoMemGyroRange(infomem: infomgyro,range: GyroSensor.Range.RANGE_1000DPS)
        gyroRange = (Int(infomgyro[ConfigByteLayoutShimmer3.idxConfigSetupByte2] >> ConfigByteLayoutShimmer3.bitShiftMPU9150GyroRange) & ConfigByteLayoutShimmer3.maskMPU9150GyroRange)
        XCTAssertEqual(gyroRange, 2, "Failed to set gyro range")
        
        infomgyro = gyroSensor.updateInfoMemGyroRange(infomem: infomgyro,range: GyroSensor.Range.RANGE_2000DPS)
        gyroRange = (Int(infomgyro[ConfigByteLayoutShimmer3.idxConfigSetupByte2] >> ConfigByteLayoutShimmer3.bitShiftMPU9150GyroRange) & ConfigByteLayoutShimmer3.maskMPU9150GyroRange)
        XCTAssertEqual(gyroRange, 3, "Failed to set gyro range")
    }
    func testSensorPressureResolution(){
        var pressTempSensor: PressureTempSensor = PressureTempSensor()
        var infompressuretemp:[UInt8] = [0x80, 0x02, 0x01, 0x00, 0x00, 0x04, 0x01, 0xFF, 0x01, 0x08, 0x00, 0x88, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x09, 0x00, 0x00, 0x00, 0x08, 0xCD, 0x08, 0xCD, 0x08, 0xCD, 0x00, 0x5C, 0x00, 0x5C, 0x00, 0x5C, 0x00, 0x9C, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x96, 0x19, 0x96, 0x19, 0x96, 0x00, 0x9C, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x9B, 0x02, 0x9B, 0x02, 0x9B, 0x00, 0x9C, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x87, 0x06, 0x87, 0x06, 0x87, 0x00, 0x9C, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x68, 0x69, 0x6D, 0x6D, 0x65, 0x72, 0x5F, 0x36, 0x38, 0x44, 0x44, 0x74, 0x72, 0x74, 0x72, 0x74, 0x72, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x65, 0xD4, 0xBD, 0x5F, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xEB, 0x1B, 0x97, 0x67, 0xFC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                          
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        infompressuretemp = pressTempSensor.updateInfoMemPressureResolution(infomem: infompressuretemp,res: PressureTempSensor.Resolution.RES_LOW)
        var pressureResolution = (Int(infompressuretemp[ConfigByteLayoutShimmer3.idxConfigSetupByte3]>>ConfigByteLayoutShimmer3.bitShiftBMPX80PressureResolution) & ConfigByteLayoutShimmer3.maskBMPX80PressureResolution)

        XCTAssertEqual(pressureResolution, 0, "Failed to set pressure resolution")
        
        infompressuretemp = pressTempSensor.updateInfoMemPressureResolution(infomem: infompressuretemp,res: PressureTempSensor.Resolution.RES_STANDARD)
        pressureResolution = (Int(infompressuretemp[ConfigByteLayoutShimmer3.idxConfigSetupByte3]>>ConfigByteLayoutShimmer3.bitShiftBMPX80PressureResolution) & ConfigByteLayoutShimmer3.maskBMPX80PressureResolution)
        XCTAssertEqual(pressureResolution, 1, "Failed to set pressure resolution")
        
        infompressuretemp = pressTempSensor.updateInfoMemPressureResolution(infomem: infompressuretemp,res: PressureTempSensor.Resolution.RES_HIGH)
        pressureResolution = (Int(infompressuretemp[ConfigByteLayoutShimmer3.idxConfigSetupByte3]>>ConfigByteLayoutShimmer3.bitShiftBMPX80PressureResolution) & ConfigByteLayoutShimmer3.maskBMPX80PressureResolution)
        XCTAssertEqual(pressureResolution, 2, "Failed to set pressure resolution")
        
        infompressuretemp = pressTempSensor.updateInfoMemPressureResolution(infomem: infompressuretemp,res: PressureTempSensor.Resolution.RES_ULTRAHIGH)
        pressureResolution = (Int(infompressuretemp[ConfigByteLayoutShimmer3.idxConfigSetupByte3]>>ConfigByteLayoutShimmer3.bitShiftBMPX80PressureResolution) & ConfigByteLayoutShimmer3.maskBMPX80PressureResolution)
        XCTAssertEqual(pressureResolution, 3, "Failed to set pressure resolution")
    }
    func testSensorEcgRespGain(){
        var exgSensor: EXGSensor = EXGSensor()
        var infomexg:[UInt8] = [0x80, 0x02, 0x01, 0x00, 0x00, 0x18, 0x01, 0xFF, 0x01, 0x09, 0x00, 0xA8, 0x10, 0x40, 0x40, 0x2D, 0x00, 0x00, 0x02, 0x03, 0x00, 0xA0, 0x10, 0x40, 0x47, 0x00, 0x00, 0x00, 0x02, 0x01, 0x09, 0x00, 0x00, 0x00, 0x08, 0xCD, 0x08, 0xCD, 0x08, 0xCD, 0x00, 0x5C, 0x00, 0x5C, 0x00, 0x5C, 0x00, 0x9C, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x96, 0x19, 0x96, 0x19, 0x96, 0x00, 0x9C, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x9B, 0x02, 0x9B, 0x02, 0x9B, 0x00, 0x9C, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x87, 0x06, 0x87, 0x06, 0x87, 0x00, 0x9C, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x68, 0x69, 0x6D, 0x6D, 0x65, 0x72, 0x5F, 0x36, 0x38, 0x44, 0x44, 0x74, 0x72, 0x74, 0x72, 0x74, 0x72, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x65, 0xCB, 0x1F, 0xAA, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xEB, 0x1B, 0x97, 0x67, 0xFC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        exgSensor.CurrentEXGMode = EXGSensor.EXGMode.ECG
        infomexg = exgSensor.updateInfoMemExgGain(infomem: infomexg, gain: EXGSensor.Gain.GAIN_1)
        var exg1GainValue = exgSensor.convertEcgGainSettingToValue(setting: Int(infomexg[13]))
        var exg2GainValue = exgSensor.convertEcgGainSettingToValue(setting: Int(infomexg[23]))
        
        XCTAssertEqual(exg1GainValue, 1, "Failed to set exg gain")
        XCTAssertEqual(exg2GainValue, 1, "Failed to set exg gain")
        
        infomexg = exgSensor.updateInfoMemExgGain(infomem: infomexg, gain: EXGSensor.Gain.GAIN_2)
        exg1GainValue = exgSensor.convertEcgGainSettingToValue(setting: Int(infomexg[13]))
        exg2GainValue = exgSensor.convertEcgGainSettingToValue(setting: Int(infomexg[23]))
        
        XCTAssertEqual(exg1GainValue, 2, "Failed to set exg gain")
        XCTAssertEqual(exg2GainValue, 2, "Failed to set exg gain")
        
        infomexg = exgSensor.updateInfoMemExgGain(infomem: infomexg, gain: EXGSensor.Gain.GAIN_3)
        exg1GainValue = exgSensor.convertEcgGainSettingToValue(setting: Int(infomexg[13]))
        exg2GainValue = exgSensor.convertEcgGainSettingToValue(setting: Int(infomexg[23]))
        
        XCTAssertEqual(exg1GainValue, 3, "Failed to set exg gain")
        XCTAssertEqual(exg2GainValue, 3, "Failed to set exg gain")
        
        infomexg = exgSensor.updateInfoMemExgGain(infomem: infomexg, gain: EXGSensor.Gain.GAIN_4)
        exg1GainValue = exgSensor.convertEcgGainSettingToValue(setting: Int(infomexg[13]))
        exg2GainValue = exgSensor.convertEcgGainSettingToValue(setting: Int(infomexg[23]))
        
        XCTAssertEqual(exg1GainValue, 4, "Failed to set exg gain")
        XCTAssertEqual(exg2GainValue, 4, "Failed to set exg gain")
        
        infomexg = exgSensor.updateInfoMemExgGain(infomem: infomexg, gain: EXGSensor.Gain.GAIN_6)
        exg1GainValue = exgSensor.convertEcgGainSettingToValue(setting: Int(infomexg[13]))
        exg2GainValue = exgSensor.convertEcgGainSettingToValue(setting: Int(infomexg[23]))
        
        XCTAssertEqual(exg1GainValue, 6, "Failed to set exg gain")
        XCTAssertEqual(exg2GainValue, 6, "Failed to set exg gain")
        
        infomexg = exgSensor.updateInfoMemExgGain(infomem: infomexg, gain: EXGSensor.Gain.GAIN_8)
        exg1GainValue = exgSensor.convertEcgGainSettingToValue(setting: Int(infomexg[13]))
        exg2GainValue = exgSensor.convertEcgGainSettingToValue(setting: Int(infomexg[23]))
        
        XCTAssertEqual(exg1GainValue, 8, "Failed to set exg gain")
        XCTAssertEqual(exg2GainValue, 8, "Failed to set exg gain")
        
        infomexg = exgSensor.updateInfoMemExgGain(infomem: infomexg, gain: EXGSensor.Gain.GAIN_12)
        exg1GainValue = exgSensor.convertEcgGainSettingToValue(setting: Int(infomexg[13]))
        exg2GainValue = exgSensor.convertEcgGainSettingToValue(setting: Int(infomexg[23]))
        
        XCTAssertEqual(exg1GainValue, 12, "Failed to set exg gain")
        XCTAssertEqual(exg2GainValue, 12, "Failed to set exg gain")
    }
    
    func testSensorExgTestGain(){
        var exgSensor: EXGSensor = EXGSensor()
        var infomexgtest:[UInt8] = [0x80, 0x02, 0x01, 0x18, 0x00, 0x00, 0x01, 0xFF, 0x01, 0x09, 0x00, 0xAB, 0x10, 0x15, 0x15, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0xA3, 0x10, 0x15, 0x15, 0x00, 0x00, 0x00, 0x02, 0x01, 0x09, 0x00, 0x00, 0x00, 0x08, 0xCD, 0x08, 0xCD, 0x08, 0xCD, 0x00, 0x5C, 0x00, 0x5C, 0x00, 0x5C, 0x00, 0x9C, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x96, 0x19, 0x96, 0x19, 0x96, 0x00, 0x9C, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x9B, 0x02, 0x9B, 0x02, 0x9B, 0x00, 0x9C, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x87, 0x06, 0x87, 0x06, 0x87, 0x00, 0x9C, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    
                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x68, 0x69, 0x6D, 0x6D, 0x65, 0x72, 0x5F, 0x36, 0x38, 0x44, 0x44, 0x74, 0x72, 0x74, 0x72, 0x74, 0x72, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x65, 0xCC, 0x2F, 0xBD, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xEB, 0x1B, 0x97, 0x67, 0xFC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     
                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

        
        exgSensor.CurrentEXGMode = EXGSensor.EXGMode.TEST_SIGNAL

        infomexgtest = exgSensor.updateInfoMemExgGain(infomem: infomexgtest, gain: EXGSensor.Gain.GAIN_1)
        var exg1GainValue = exgSensor.convertTestGainSettingToValue(setting: Int(infomexgtest[13]))
        var exg2GainValue = exgSensor.convertTestGainSettingToValue(setting: Int(infomexgtest[23]))
        
        XCTAssertEqual(exg1GainValue, 1, "Failed to set test exg gain")
        XCTAssertEqual(exg2GainValue, 1, "Failed to set test exg gain")
        
        infomexgtest = exgSensor.updateInfoMemExgGain(infomem: infomexgtest, gain: EXGSensor.Gain.GAIN_2)
        exg1GainValue = exgSensor.convertTestGainSettingToValue(setting: Int(infomexgtest[13]))
        exg2GainValue = exgSensor.convertTestGainSettingToValue(setting: Int(infomexgtest[23]))
        
        XCTAssertEqual(exg1GainValue, 2, "Failed to set test exg gain")
        XCTAssertEqual(exg2GainValue, 2, "Failed to set test exg gain")
        
        infomexgtest = exgSensor.updateInfoMemExgGain(infomem: infomexgtest, gain: EXGSensor.Gain.GAIN_3)
        exg1GainValue = exgSensor.convertTestGainSettingToValue(setting: Int(infomexgtest[13]))
        exg2GainValue = exgSensor.convertTestGainSettingToValue(setting: Int(infomexgtest[23]))
        
        XCTAssertEqual(exg1GainValue, 3, "Failed to set test exg gain")
        XCTAssertEqual(exg2GainValue, 3, "Failed to set test exg gain")
        
        infomexgtest = exgSensor.updateInfoMemExgGain(infomem: infomexgtest, gain: EXGSensor.Gain.GAIN_4)
        exg1GainValue = exgSensor.convertTestGainSettingToValue(setting: Int(infomexgtest[13]))
        exg2GainValue = exgSensor.convertTestGainSettingToValue(setting: Int(infomexgtest[23]))
        
        XCTAssertEqual(exg1GainValue, 4, "Failed to set test exg gain")
        XCTAssertEqual(exg2GainValue, 4, "Failed to set test exg gain")
        
        infomexgtest = exgSensor.updateInfoMemExgGain(infomem: infomexgtest, gain: EXGSensor.Gain.GAIN_6)
        exg1GainValue = exgSensor.convertTestGainSettingToValue(setting: Int(infomexgtest[13]))
        exg2GainValue = exgSensor.convertTestGainSettingToValue(setting: Int(infomexgtest[23]))
        
        XCTAssertEqual(exg1GainValue, 6, "Failed to set test exg gain")
        XCTAssertEqual(exg2GainValue, 6, "Failed to set test exg gain")
        
        infomexgtest = exgSensor.updateInfoMemExgGain(infomem: infomexgtest, gain: EXGSensor.Gain.GAIN_8)
        exg1GainValue = exgSensor.convertTestGainSettingToValue(setting: Int(infomexgtest[13]))
        exg2GainValue = exgSensor.convertTestGainSettingToValue(setting: Int(infomexgtest[23]))
        
        XCTAssertEqual(exg1GainValue, 8, "Failed to set test exg gain")
        XCTAssertEqual(exg2GainValue, 8, "Failed to set test exg gain")
        
        infomexgtest = exgSensor.updateInfoMemExgGain(infomem: infomexgtest, gain: EXGSensor.Gain.GAIN_12)
        exg1GainValue = exgSensor.convertTestGainSettingToValue(setting: Int(infomexgtest[13]))
        exg2GainValue = exgSensor.convertTestGainSettingToValue(setting: Int(infomexgtest[23]))
        
        XCTAssertEqual(exg1GainValue, 12, "Failed to set test exg gain")
        XCTAssertEqual(exg2GainValue, 12, "Failed to set test exg gain")
    }
    
    
    func testSensorEcgRespTestResolution(){
        var exgSensor: EXGSensor = EXGSensor()
        var infomexg:[UInt8] = [0x80, 0x02, 0x01, 0x00, 0x00, 0x18, 0x01, 0xFF, 0x01, 0x09, 0x00, 0xA8, 0x10, 0x40, 0x40, 0x2D, 0x00, 0x00, 0x02, 0x03, 0x00, 0xA0, 0x10, 0x40, 0x47, 0x00, 0x00, 0x00, 0x02, 0x01, 0x09, 0x00, 0x00, 0x00, 0x08, 0xCD, 0x08, 0xCD, 0x08, 0xCD, 0x00, 0x5C, 0x00, 0x5C, 0x00, 0x5C, 0x00, 0x9C, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x96, 0x19, 0x96, 0x19, 0x96, 0x00, 0x9C, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x9B, 0x02, 0x9B, 0x02, 0x9B, 0x00, 0x9C, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x87, 0x06, 0x87, 0x06, 0x87, 0x00, 0x9C, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x68, 0x69, 0x6D, 0x6D, 0x65, 0x72, 0x5F, 0x36, 0x38, 0x44, 0x44, 0x74, 0x72, 0x74, 0x72, 0x74, 0x72, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x65, 0xCB, 0x1F, 0xAA, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xEB, 0x1B, 0x97, 0x67, 0xFC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        
       
        infomexg = exgSensor.updateInfoMemExgResolution(infomem: infomexg, resolution: EXGSensor.Resolution.RESOLUTION_16BIT)
        var resByte0InHexString = String(infomexg[ConfigByteLayoutShimmer3.idxSensors0], radix: 16)
        
        XCTAssertEqual(resByte0InHexString, "0", "Failed to set exg resolution")
        
        infomexg = exgSensor.updateInfoMemExgResolution(infomem: infomexg, resolution: EXGSensor.Resolution.RESOLUTION_24BIT)
        resByte0InHexString = String(infomexg[ConfigByteLayoutShimmer3.idxSensors0], radix: 16)
        
        XCTAssertEqual(resByte0InHexString, "18", "Failed to set exg resolution")
        
    }
    
    func testSensorEmgResolutionAndGain(){
        var exgSensor: EXGSensor = EXGSensor()
        var infomemg:[UInt8] = [0x80, 0x02, 0x01, 0x10, 0x00, 0x00, 0x01, 0xFF, 0x01, 0x09, 0x00, 0xA8, 0x10, 0x69, 0x60, 0x20, 0x00, 0x00, 0x02, 0x03, 0x00, 0xA0, 0x10, 0xE1, 0xE1, 0x00, 0x00, 0x00, 0x02, 0x01, 0x09, 0x00, 0x00, 0x00, 0x08, 0xCD, 0x08, 0xCD, 0x08, 0xCD, 0x00, 0x5C, 0x00, 0x5C, 0x00, 0x5C, 0x00, 0x9C, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x96, 0x19, 0x96, 0x19, 0x96, 0x00, 0x9C, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x9B, 0x02, 0x9B, 0x02, 0x9B, 0x00, 0x9C, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x87, 0x06, 0x87, 0x06, 0x87, 0x00, 0x9C, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x68, 0x69, 0x6D, 0x6D, 0x65, 0x72, 0x5F, 0x36, 0x38, 0x44, 0x44, 0x74, 0x72, 0x74, 0x72, 0x74, 0x72, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x65, 0xCC, 0x3B, 0xAA, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xEB, 0x1B, 0x97, 0x67, 0xFC, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                 
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        
        exgSensor.CurrentEXGMode = EXGSensor.EXGMode.EMG

        infomemg = exgSensor.updateInfoMemExgResolution(infomem: infomemg, resolution: EXGSensor.Resolution.RESOLUTION_16BIT)
        var resByte0InHexString = String(infomemg[ConfigByteLayoutShimmer3.idxSensors0], radix: 16)
        
        XCTAssertEqual(resByte0InHexString, "0", "Failed to set emg resolution")
        
        infomemg = exgSensor.updateInfoMemExgResolution(infomem: infomemg, resolution: EXGSensor.Resolution.RESOLUTION_24BIT)
        resByte0InHexString = String(infomemg[ConfigByteLayoutShimmer3.idxSensors0], radix: 16)
        
        XCTAssertEqual(resByte0InHexString, "10", "Failed to set emg resolution")
        
        infomemg = exgSensor.updateInfoMemExgGain(infomem: infomemg, gain: EXGSensor.Gain.GAIN_1)
        var exg1GainValue = exgSensor.convertEmgGainSettingToValue(setting: Int(infomemg[13]))
        
        XCTAssertEqual(exg1GainValue, 1, "Failed to set emg gain")
        
        infomemg = exgSensor.updateInfoMemExgGain(infomem: infomemg, gain: EXGSensor.Gain.GAIN_2)
        exg1GainValue = exgSensor.convertEmgGainSettingToValue(setting: Int(infomemg[13]))
        
        XCTAssertEqual(exg1GainValue, 2, "Failed to set emg gain")
        
        infomemg = exgSensor.updateInfoMemExgGain(infomem: infomemg, gain: EXGSensor.Gain.GAIN_3)
        exg1GainValue = exgSensor.convertEmgGainSettingToValue(setting: Int(infomemg[13]))
        
        XCTAssertEqual(exg1GainValue, 3, "Failed to set emg gain")
        
        infomemg = exgSensor.updateInfoMemExgGain(infomem: infomemg, gain: EXGSensor.Gain.GAIN_4)
        exg1GainValue = exgSensor.convertEmgGainSettingToValue(setting: Int(infomemg[13]))
        
        XCTAssertEqual(exg1GainValue, 4, "Failed to set emg gain")
        
        infomemg = exgSensor.updateInfoMemExgGain(infomem: infomemg, gain: EXGSensor.Gain.GAIN_6)
        exg1GainValue = exgSensor.convertEmgGainSettingToValue(setting: Int(infomemg[13]))
        
        XCTAssertEqual(exg1GainValue, 6, "Failed to set emg gain")
        
        infomemg = exgSensor.updateInfoMemExgGain(infomem: infomemg, gain: EXGSensor.Gain.GAIN_8)
        exg1GainValue = exgSensor.convertEmgGainSettingToValue(setting: Int(infomemg[13]))
        
        XCTAssertEqual(exg1GainValue, 8, "Failed to set emg gain")
        
        infomemg = exgSensor.updateInfoMemExgGain(infomem: infomemg, gain: EXGSensor.Gain.GAIN_12)
        exg1GainValue = exgSensor.convertEmgGainSettingToValue(setting: Int(infomemg[13]))
        
        XCTAssertEqual(exg1GainValue, 12, "Failed to set emg gain")
        
    }
   
}
