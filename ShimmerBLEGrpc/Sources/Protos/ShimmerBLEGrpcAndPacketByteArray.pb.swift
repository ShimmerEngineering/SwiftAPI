// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ShimmerBLEGrpcAndPacketByteArray.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///using 
///protoc-3.13.0-win64
///protoc-gen-grpc-java-1.32.1-windows-x86_64.exe
///.nuget\packages\grpc.tools\2.34.0\tools\windows_x64\grpc_csharp_plugin.exe

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum ShimmerBLEGRPC_BluetoothState: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case connected // = 0
  case connecting // = 1
  case disconnected // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .connected
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .connected
    case 1: self = .connecting
    case 2: self = .disconnected
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .connected: return 0
    case .connecting: return 1
    case .disconnected: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [ShimmerBLEGRPC_BluetoothState] = [
    .connected,
    .connecting,
    .disconnected,
  ]

}

/// The response message containing the greetings
struct ShimmerBLEGRPC_Reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// The request message containing the user's name.
struct ShimmerBLEGRPC_Request: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ShimmerBLEGRPC_WriteBytes: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var byteToWrite: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ShimmerBLEGRPC_StreamRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ShimmerBLEGRPC_StateStatus: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var state: ShimmerBLEGRPC_BluetoothState = .connected

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ShimmerBLEGRPC_ObjectClusterByteArray: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String = String()

  var bluetoothAddress: String = String()

  var communicationType: ShimmerBLEGRPC_ObjectClusterByteArray.CommunicationType = .bt

  var systemTime: Int64 = 0

  var calibratedTimeStamp: Double = 0

  var binaryData: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum CommunicationType: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case bt // = 0
    case sd // = 1
    case radio802154 // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .bt
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .bt
      case 1: self = .sd
      case 2: self = .radio802154
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .bt: return 0
      case .sd: return 1
      case .radio802154: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [ShimmerBLEGRPC_ObjectClusterByteArray.CommunicationType] = [
      .bt,
      .sd,
      .radio802154,
    ]

  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "shimmerBLEGRPC"

extension ShimmerBLEGRPC_BluetoothState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Connected"),
    1: .same(proto: "Connecting"),
    2: .same(proto: "Disconnected"),
  ]
}

extension ShimmerBLEGRPC_Reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Reply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ShimmerBLEGRPC_Reply, rhs: ShimmerBLEGRPC_Reply) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ShimmerBLEGRPC_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ShimmerBLEGRPC_Request, rhs: ShimmerBLEGRPC_Request) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ShimmerBLEGRPC_WriteBytes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WriteBytes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "byte_to_write"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.byteToWrite) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.byteToWrite.isEmpty {
      try visitor.visitSingularBytesField(value: self.byteToWrite, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ShimmerBLEGRPC_WriteBytes, rhs: ShimmerBLEGRPC_WriteBytes) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.byteToWrite != rhs.byteToWrite {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ShimmerBLEGRPC_StreamRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StreamRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ShimmerBLEGRPC_StreamRequest, rhs: ShimmerBLEGRPC_StreamRequest) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ShimmerBLEGRPC_StateStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StateStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "State"),
    2: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .connected {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ShimmerBLEGRPC_StateStatus, rhs: ShimmerBLEGRPC_StateStatus) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ShimmerBLEGRPC_ObjectClusterByteArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ObjectClusterByteArray"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "bluetoothAddress"),
    3: .same(proto: "communicationType"),
    4: .same(proto: "systemTime"),
    5: .same(proto: "calibratedTimeStamp"),
    6: .standard(proto: "binary_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.bluetoothAddress) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.communicationType) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.systemTime) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.calibratedTimeStamp) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.binaryData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.bluetoothAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.bluetoothAddress, fieldNumber: 2)
    }
    if self.communicationType != .bt {
      try visitor.visitSingularEnumField(value: self.communicationType, fieldNumber: 3)
    }
    if self.systemTime != 0 {
      try visitor.visitSingularInt64Field(value: self.systemTime, fieldNumber: 4)
    }
    if self.calibratedTimeStamp.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.calibratedTimeStamp, fieldNumber: 5)
    }
    if !self.binaryData.isEmpty {
      try visitor.visitSingularBytesField(value: self.binaryData, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ShimmerBLEGRPC_ObjectClusterByteArray, rhs: ShimmerBLEGRPC_ObjectClusterByteArray) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.bluetoothAddress != rhs.bluetoothAddress {return false}
    if lhs.communicationType != rhs.communicationType {return false}
    if lhs.systemTime != rhs.systemTime {return false}
    if lhs.calibratedTimeStamp != rhs.calibratedTimeStamp {return false}
    if lhs.binaryData != rhs.binaryData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ShimmerBLEGRPC_ObjectClusterByteArray.CommunicationType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BT"),
    1: .same(proto: "SD"),
    2: .same(proto: "Radio_802_15_4"),
  ]
}
