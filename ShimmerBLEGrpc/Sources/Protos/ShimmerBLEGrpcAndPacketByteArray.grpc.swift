///using 
///protoc-3.13.0-win64
///protoc-gen-grpc-java-1.32.1-windows-x86_64.exe
///.nuget\packages\grpc.tools\2.34.0\tools\windows_x64\grpc_csharp_plugin.exe

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: ShimmerBLEGrpcAndPacketByteArray.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - shimmerBLEGRPC.ShimmerBLEByteServer

/// Namespace containing generated types for the "shimmerBLEGRPC.ShimmerBLEByteServer" service.
internal enum ShimmerBLEGRPC_ShimmerBLEByteServer {
    /// Service descriptor for the "shimmerBLEGRPC.ShimmerBLEByteServer" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "shimmerBLEGRPC.ShimmerBLEByteServer")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "GetDataStream" metadata.
        internal enum GetDataStream {
            /// Request type for "GetDataStream".
            internal typealias Input = ShimmerBLEGRPC_StreamRequest
            /// Response type for "GetDataStream".
            internal typealias Output = ShimmerBLEGRPC_ObjectClusterByteArray
            /// Descriptor for "GetDataStream".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "shimmerBLEGRPC.ShimmerBLEByteServer"),
                method: "GetDataStream"
            )
        }
        /// Namespace for "GetTestDataStream" metadata.
        internal enum GetTestDataStream {
            /// Request type for "GetTestDataStream".
            internal typealias Input = ShimmerBLEGRPC_StreamRequest
            /// Response type for "GetTestDataStream".
            internal typealias Output = ShimmerBLEGRPC_ObjectClusterByteArray
            /// Descriptor for "GetTestDataStream".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "shimmerBLEGRPC.ShimmerBLEByteServer"),
                method: "GetTestDataStream"
            )
        }
        /// Namespace for "SendDataStream" metadata.
        internal enum SendDataStream {
            /// Request type for "SendDataStream".
            internal typealias Input = ShimmerBLEGRPC_ObjectClusterByteArray
            /// Response type for "SendDataStream".
            internal typealias Output = ShimmerBLEGRPC_Reply
            /// Descriptor for "SendDataStream".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "shimmerBLEGRPC.ShimmerBLEByteServer"),
                method: "SendDataStream"
            )
        }
        /// Namespace for "ConnectShimmer" metadata.
        internal enum ConnectShimmer {
            /// Request type for "ConnectShimmer".
            internal typealias Input = ShimmerBLEGRPC_Request
            /// Response type for "ConnectShimmer".
            internal typealias Output = ShimmerBLEGRPC_StateStatus
            /// Descriptor for "ConnectShimmer".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "shimmerBLEGRPC.ShimmerBLEByteServer"),
                method: "ConnectShimmer"
            )
        }
        /// Namespace for "DisconnectShimmer" metadata.
        internal enum DisconnectShimmer {
            /// Request type for "DisconnectShimmer".
            internal typealias Input = ShimmerBLEGRPC_Request
            /// Response type for "DisconnectShimmer".
            internal typealias Output = ShimmerBLEGRPC_Reply
            /// Descriptor for "DisconnectShimmer".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "shimmerBLEGRPC.ShimmerBLEByteServer"),
                method: "DisconnectShimmer"
            )
        }
        /// Namespace for "WriteBytesShimmer" metadata.
        internal enum WriteBytesShimmer {
            /// Request type for "WriteBytesShimmer".
            internal typealias Input = ShimmerBLEGRPC_WriteBytes
            /// Response type for "WriteBytesShimmer".
            internal typealias Output = ShimmerBLEGRPC_Reply
            /// Descriptor for "WriteBytesShimmer".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "shimmerBLEGRPC.ShimmerBLEByteServer"),
                method: "WriteBytesShimmer"
            )
        }
        /// Namespace for "SayHello" metadata.
        internal enum SayHello {
            /// Request type for "SayHello".
            internal typealias Input = ShimmerBLEGRPC_Request
            /// Response type for "SayHello".
            internal typealias Output = ShimmerBLEGRPC_Reply
            /// Descriptor for "SayHello".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "shimmerBLEGRPC.ShimmerBLEByteServer"),
                method: "SayHello"
            )
        }
        /// Descriptors for all methods in the "shimmerBLEGRPC.ShimmerBLEByteServer" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetDataStream.descriptor,
            GetTestDataStream.descriptor,
            SendDataStream.descriptor,
            ConnectShimmer.descriptor,
            DisconnectShimmer.descriptor,
            WriteBytesShimmer.descriptor,
            SayHello.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "shimmerBLEGRPC.ShimmerBLEByteServer" service.
    internal static let shimmerBlegrpc_ShimmerBLEByteServer = GRPCCore.ServiceDescriptor(fullyQualifiedService: "shimmerBLEGRPC.ShimmerBLEByteServer")
}

// MARK: shimmerBLEGRPC.ShimmerBLEByteServer (server)

extension ShimmerBLEGRPC_ShimmerBLEByteServer {
    /// Streaming variant of the service protocol for the "shimmerBLEGRPC.ShimmerBLEByteServer" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The greeter service definition.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "GetDataStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > lient asking for data
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ShimmerBLEGRPC_StreamRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        func getDataStream(
            request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_StreamRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_ObjectClusterByteArray>

        /// Handle the "GetTestDataStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > lient asking for data
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ShimmerBLEGRPC_StreamRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        func getTestDataStream(
            request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_StreamRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_ObjectClusterByteArray>

        /// Handle the "SendDataStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > lient sending data
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `ShimmerBLEGRPC_Reply` messages.
        func sendDataStream(
            request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_ObjectClusterByteArray>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_Reply>

        /// Handle the "ConnectShimmer" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ShimmerBLEGRPC_Request` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `ShimmerBLEGRPC_StateStatus` messages.
        func connectShimmer(
            request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_StateStatus>

        /// Handle the "DisconnectShimmer" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ShimmerBLEGRPC_Request` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `ShimmerBLEGRPC_Reply` messages.
        func disconnectShimmer(
            request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_Reply>

        /// Handle the "WriteBytesShimmer" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ShimmerBLEGRPC_WriteBytes` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `ShimmerBLEGRPC_Reply` messages.
        func writeBytesShimmer(
            request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_WriteBytes>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_Reply>

        /// Handle the "SayHello" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ShimmerBLEGRPC_Request` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `ShimmerBLEGRPC_Reply` messages.
        func sayHello(
            request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_Reply>
    }

    /// Service protocol for the "shimmerBLEGRPC.ShimmerBLEByteServer" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The greeter service definition.
    internal protocol ServiceProtocol: ShimmerBLEGRPC_ShimmerBLEByteServer.StreamingServiceProtocol {
        /// Handle the "GetDataStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > lient asking for data
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_StreamRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        func getDataStream(
            request: GRPCCore.ServerRequest<ShimmerBLEGRPC_StreamRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_ObjectClusterByteArray>

        /// Handle the "GetTestDataStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > lient asking for data
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_StreamRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        func getTestDataStream(
            request: GRPCCore.ServerRequest<ShimmerBLEGRPC_StreamRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_ObjectClusterByteArray>

        /// Handle the "SendDataStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > lient sending data
        ///
        /// - Parameters:
        ///   - request: A streaming request of `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `ShimmerBLEGRPC_Reply` message.
        func sendDataStream(
            request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_ObjectClusterByteArray>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<ShimmerBLEGRPC_Reply>

        /// Handle the "ConnectShimmer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `ShimmerBLEGRPC_StateStatus` messages.
        func connectShimmer(
            request: GRPCCore.ServerRequest<ShimmerBLEGRPC_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_StateStatus>

        /// Handle the "DisconnectShimmer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `ShimmerBLEGRPC_Reply` message.
        func disconnectShimmer(
            request: GRPCCore.ServerRequest<ShimmerBLEGRPC_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<ShimmerBLEGRPC_Reply>

        /// Handle the "WriteBytesShimmer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_WriteBytes` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `ShimmerBLEGRPC_Reply` message.
        func writeBytesShimmer(
            request: GRPCCore.ServerRequest<ShimmerBLEGRPC_WriteBytes>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<ShimmerBLEGRPC_Reply>

        /// Handle the "SayHello" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `ShimmerBLEGRPC_Reply` message.
        func sayHello(
            request: GRPCCore.ServerRequest<ShimmerBLEGRPC_Request>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<ShimmerBLEGRPC_Reply>
    }

    /// Simple service protocol for the "shimmerBLEGRPC.ShimmerBLEByteServer" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The greeter service definition.
    internal protocol SimpleServiceProtocol: ShimmerBLEGRPC_ShimmerBLEByteServer.ServiceProtocol {
        /// Handle the "GetDataStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > lient asking for data
        ///
        /// - Parameters:
        ///   - request: A `ShimmerBLEGRPC_StreamRequest` message.
        ///   - response: A response stream of `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func getDataStream(
            request: ShimmerBLEGRPC_StreamRequest,
            response: GRPCCore.RPCWriter<ShimmerBLEGRPC_ObjectClusterByteArray>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "GetTestDataStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > lient asking for data
        ///
        /// - Parameters:
        ///   - request: A `ShimmerBLEGRPC_StreamRequest` message.
        ///   - response: A response stream of `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func getTestDataStream(
            request: ShimmerBLEGRPC_StreamRequest,
            response: GRPCCore.RPCWriter<ShimmerBLEGRPC_ObjectClusterByteArray>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "SendDataStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > lient sending data
        ///
        /// - Parameters:
        ///   - request: A stream of `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `ShimmerBLEGRPC_Reply` to respond with.
        func sendDataStream(
            request: GRPCCore.RPCAsyncSequence<ShimmerBLEGRPC_ObjectClusterByteArray, any Swift.Error>,
            context: GRPCCore.ServerContext
        ) async throws -> ShimmerBLEGRPC_Reply

        /// Handle the "ConnectShimmer" method.
        ///
        /// - Parameters:
        ///   - request: A `ShimmerBLEGRPC_Request` message.
        ///   - response: A response stream of `ShimmerBLEGRPC_StateStatus` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func connectShimmer(
            request: ShimmerBLEGRPC_Request,
            response: GRPCCore.RPCWriter<ShimmerBLEGRPC_StateStatus>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "DisconnectShimmer" method.
        ///
        /// - Parameters:
        ///   - request: A `ShimmerBLEGRPC_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `ShimmerBLEGRPC_Reply` to respond with.
        func disconnectShimmer(
            request: ShimmerBLEGRPC_Request,
            context: GRPCCore.ServerContext
        ) async throws -> ShimmerBLEGRPC_Reply

        /// Handle the "WriteBytesShimmer" method.
        ///
        /// - Parameters:
        ///   - request: A `ShimmerBLEGRPC_WriteBytes` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `ShimmerBLEGRPC_Reply` to respond with.
        func writeBytesShimmer(
            request: ShimmerBLEGRPC_WriteBytes,
            context: GRPCCore.ServerContext
        ) async throws -> ShimmerBLEGRPC_Reply

        /// Handle the "SayHello" method.
        ///
        /// - Parameters:
        ///   - request: A `ShimmerBLEGRPC_Request` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `ShimmerBLEGRPC_Reply` to respond with.
        func sayHello(
            request: ShimmerBLEGRPC_Request,
            context: GRPCCore.ServerContext
        ) async throws -> ShimmerBLEGRPC_Reply
    }
}

// Default implementation of 'registerMethods(with:)'.
extension ShimmerBLEGRPC_ShimmerBLEByteServer.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: ShimmerBLEGRPC_ShimmerBLEByteServer.Method.GetDataStream.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<ShimmerBLEGRPC_StreamRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<ShimmerBLEGRPC_ObjectClusterByteArray>(),
            handler: { request, context in
                try await self.getDataStream(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: ShimmerBLEGRPC_ShimmerBLEByteServer.Method.GetTestDataStream.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<ShimmerBLEGRPC_StreamRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<ShimmerBLEGRPC_ObjectClusterByteArray>(),
            handler: { request, context in
                try await self.getTestDataStream(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: ShimmerBLEGRPC_ShimmerBLEByteServer.Method.SendDataStream.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<ShimmerBLEGRPC_ObjectClusterByteArray>(),
            serializer: GRPCProtobuf.ProtobufSerializer<ShimmerBLEGRPC_Reply>(),
            handler: { request, context in
                try await self.sendDataStream(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: ShimmerBLEGRPC_ShimmerBLEByteServer.Method.ConnectShimmer.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<ShimmerBLEGRPC_Request>(),
            serializer: GRPCProtobuf.ProtobufSerializer<ShimmerBLEGRPC_StateStatus>(),
            handler: { request, context in
                try await self.connectShimmer(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: ShimmerBLEGRPC_ShimmerBLEByteServer.Method.DisconnectShimmer.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<ShimmerBLEGRPC_Request>(),
            serializer: GRPCProtobuf.ProtobufSerializer<ShimmerBLEGRPC_Reply>(),
            handler: { request, context in
                try await self.disconnectShimmer(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: ShimmerBLEGRPC_ShimmerBLEByteServer.Method.WriteBytesShimmer.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<ShimmerBLEGRPC_WriteBytes>(),
            serializer: GRPCProtobuf.ProtobufSerializer<ShimmerBLEGRPC_Reply>(),
            handler: { request, context in
                try await self.writeBytesShimmer(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: ShimmerBLEGRPC_ShimmerBLEByteServer.Method.SayHello.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<ShimmerBLEGRPC_Request>(),
            serializer: GRPCProtobuf.ProtobufSerializer<ShimmerBLEGRPC_Reply>(),
            handler: { request, context in
                try await self.sayHello(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension ShimmerBLEGRPC_ShimmerBLEByteServer.ServiceProtocol {
    internal func getDataStream(
        request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_StreamRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_ObjectClusterByteArray> {
        let response = try await self.getDataStream(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    internal func getTestDataStream(
        request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_StreamRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_ObjectClusterByteArray> {
        let response = try await self.getTestDataStream(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    internal func sendDataStream(
        request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_ObjectClusterByteArray>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_Reply> {
        let response = try await self.sendDataStream(
            request: request,
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func connectShimmer(
        request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_StateStatus> {
        let response = try await self.connectShimmer(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    internal func disconnectShimmer(
        request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_Reply> {
        let response = try await self.disconnectShimmer(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func writeBytesShimmer(
        request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_WriteBytes>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_Reply> {
        let response = try await self.writeBytesShimmer(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func sayHello(
        request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_Reply> {
        let response = try await self.sayHello(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension ShimmerBLEGRPC_ShimmerBLEByteServer.SimpleServiceProtocol {
    internal func getDataStream(
        request: GRPCCore.ServerRequest<ShimmerBLEGRPC_StreamRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_ObjectClusterByteArray> {
        return GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_ObjectClusterByteArray>(
            metadata: [:],
            producer: { writer in
                try await self.getDataStream(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func getTestDataStream(
        request: GRPCCore.ServerRequest<ShimmerBLEGRPC_StreamRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_ObjectClusterByteArray> {
        return GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_ObjectClusterByteArray>(
            metadata: [:],
            producer: { writer in
                try await self.getTestDataStream(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func sendDataStream(
        request: GRPCCore.StreamingServerRequest<ShimmerBLEGRPC_ObjectClusterByteArray>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<ShimmerBLEGRPC_Reply> {
        return GRPCCore.ServerResponse<ShimmerBLEGRPC_Reply>(
            message: try await self.sendDataStream(
                request: request.messages,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func connectShimmer(
        request: GRPCCore.ServerRequest<ShimmerBLEGRPC_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_StateStatus> {
        return GRPCCore.StreamingServerResponse<ShimmerBLEGRPC_StateStatus>(
            metadata: [:],
            producer: { writer in
                try await self.connectShimmer(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func disconnectShimmer(
        request: GRPCCore.ServerRequest<ShimmerBLEGRPC_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<ShimmerBLEGRPC_Reply> {
        return GRPCCore.ServerResponse<ShimmerBLEGRPC_Reply>(
            message: try await self.disconnectShimmer(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func writeBytesShimmer(
        request: GRPCCore.ServerRequest<ShimmerBLEGRPC_WriteBytes>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<ShimmerBLEGRPC_Reply> {
        return GRPCCore.ServerResponse<ShimmerBLEGRPC_Reply>(
            message: try await self.writeBytesShimmer(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func sayHello(
        request: GRPCCore.ServerRequest<ShimmerBLEGRPC_Request>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<ShimmerBLEGRPC_Reply> {
        return GRPCCore.ServerResponse<ShimmerBLEGRPC_Reply>(
            message: try await self.sayHello(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: shimmerBLEGRPC.ShimmerBLEByteServer (client)

extension ShimmerBLEGRPC_ShimmerBLEByteServer {
    /// Generated client protocol for the "shimmerBLEGRPC.ShimmerBLEByteServer" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The greeter service definition.
    internal protocol ClientProtocol: Sendable {
        /// Call the "GetDataStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > lient asking for data
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_StreamRequest` message.
        ///   - serializer: A serializer for `ShimmerBLEGRPC_StreamRequest` messages.
        ///   - deserializer: A deserializer for `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getDataStream<Result>(
            request: GRPCCore.ClientRequest<ShimmerBLEGRPC_StreamRequest>,
            serializer: some GRPCCore.MessageSerializer<ShimmerBLEGRPC_StreamRequest>,
            deserializer: some GRPCCore.MessageDeserializer<ShimmerBLEGRPC_ObjectClusterByteArray>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<ShimmerBLEGRPC_ObjectClusterByteArray>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetTestDataStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > lient asking for data
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_StreamRequest` message.
        ///   - serializer: A serializer for `ShimmerBLEGRPC_StreamRequest` messages.
        ///   - deserializer: A deserializer for `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getTestDataStream<Result>(
            request: GRPCCore.ClientRequest<ShimmerBLEGRPC_StreamRequest>,
            serializer: some GRPCCore.MessageSerializer<ShimmerBLEGRPC_StreamRequest>,
            deserializer: some GRPCCore.MessageDeserializer<ShimmerBLEGRPC_ObjectClusterByteArray>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<ShimmerBLEGRPC_ObjectClusterByteArray>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SendDataStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > lient sending data
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        ///   - serializer: A serializer for `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        ///   - deserializer: A deserializer for `ShimmerBLEGRPC_Reply` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func sendDataStream<Result>(
            request: GRPCCore.StreamingClientRequest<ShimmerBLEGRPC_ObjectClusterByteArray>,
            serializer: some GRPCCore.MessageSerializer<ShimmerBLEGRPC_ObjectClusterByteArray>,
            deserializer: some GRPCCore.MessageDeserializer<ShimmerBLEGRPC_Reply>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ConnectShimmer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_Request` message.
        ///   - serializer: A serializer for `ShimmerBLEGRPC_Request` messages.
        ///   - deserializer: A deserializer for `ShimmerBLEGRPC_StateStatus` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func connectShimmer<Result>(
            request: GRPCCore.ClientRequest<ShimmerBLEGRPC_Request>,
            serializer: some GRPCCore.MessageSerializer<ShimmerBLEGRPC_Request>,
            deserializer: some GRPCCore.MessageDeserializer<ShimmerBLEGRPC_StateStatus>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<ShimmerBLEGRPC_StateStatus>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DisconnectShimmer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_Request` message.
        ///   - serializer: A serializer for `ShimmerBLEGRPC_Request` messages.
        ///   - deserializer: A deserializer for `ShimmerBLEGRPC_Reply` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func disconnectShimmer<Result>(
            request: GRPCCore.ClientRequest<ShimmerBLEGRPC_Request>,
            serializer: some GRPCCore.MessageSerializer<ShimmerBLEGRPC_Request>,
            deserializer: some GRPCCore.MessageDeserializer<ShimmerBLEGRPC_Reply>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "WriteBytesShimmer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_WriteBytes` message.
        ///   - serializer: A serializer for `ShimmerBLEGRPC_WriteBytes` messages.
        ///   - deserializer: A deserializer for `ShimmerBLEGRPC_Reply` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func writeBytesShimmer<Result>(
            request: GRPCCore.ClientRequest<ShimmerBLEGRPC_WriteBytes>,
            serializer: some GRPCCore.MessageSerializer<ShimmerBLEGRPC_WriteBytes>,
            deserializer: some GRPCCore.MessageDeserializer<ShimmerBLEGRPC_Reply>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SayHello" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_Request` message.
        ///   - serializer: A serializer for `ShimmerBLEGRPC_Request` messages.
        ///   - deserializer: A deserializer for `ShimmerBLEGRPC_Reply` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func sayHello<Result>(
            request: GRPCCore.ClientRequest<ShimmerBLEGRPC_Request>,
            serializer: some GRPCCore.MessageSerializer<ShimmerBLEGRPC_Request>,
            deserializer: some GRPCCore.MessageDeserializer<ShimmerBLEGRPC_Reply>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "shimmerBLEGRPC.ShimmerBLEByteServer" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The greeter service definition.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "GetDataStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > lient asking for data
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_StreamRequest` message.
        ///   - serializer: A serializer for `ShimmerBLEGRPC_StreamRequest` messages.
        ///   - deserializer: A deserializer for `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getDataStream<Result>(
            request: GRPCCore.ClientRequest<ShimmerBLEGRPC_StreamRequest>,
            serializer: some GRPCCore.MessageSerializer<ShimmerBLEGRPC_StreamRequest>,
            deserializer: some GRPCCore.MessageDeserializer<ShimmerBLEGRPC_ObjectClusterByteArray>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<ShimmerBLEGRPC_ObjectClusterByteArray>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: ShimmerBLEGRPC_ShimmerBLEByteServer.Method.GetDataStream.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetTestDataStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > lient asking for data
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_StreamRequest` message.
        ///   - serializer: A serializer for `ShimmerBLEGRPC_StreamRequest` messages.
        ///   - deserializer: A deserializer for `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getTestDataStream<Result>(
            request: GRPCCore.ClientRequest<ShimmerBLEGRPC_StreamRequest>,
            serializer: some GRPCCore.MessageSerializer<ShimmerBLEGRPC_StreamRequest>,
            deserializer: some GRPCCore.MessageDeserializer<ShimmerBLEGRPC_ObjectClusterByteArray>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<ShimmerBLEGRPC_ObjectClusterByteArray>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: ShimmerBLEGRPC_ShimmerBLEByteServer.Method.GetTestDataStream.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SendDataStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > lient sending data
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        ///   - serializer: A serializer for `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
        ///   - deserializer: A deserializer for `ShimmerBLEGRPC_Reply` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func sendDataStream<Result>(
            request: GRPCCore.StreamingClientRequest<ShimmerBLEGRPC_ObjectClusterByteArray>,
            serializer: some GRPCCore.MessageSerializer<ShimmerBLEGRPC_ObjectClusterByteArray>,
            deserializer: some GRPCCore.MessageDeserializer<ShimmerBLEGRPC_Reply>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.clientStreaming(
                request: request,
                descriptor: ShimmerBLEGRPC_ShimmerBLEByteServer.Method.SendDataStream.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ConnectShimmer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_Request` message.
        ///   - serializer: A serializer for `ShimmerBLEGRPC_Request` messages.
        ///   - deserializer: A deserializer for `ShimmerBLEGRPC_StateStatus` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func connectShimmer<Result>(
            request: GRPCCore.ClientRequest<ShimmerBLEGRPC_Request>,
            serializer: some GRPCCore.MessageSerializer<ShimmerBLEGRPC_Request>,
            deserializer: some GRPCCore.MessageDeserializer<ShimmerBLEGRPC_StateStatus>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<ShimmerBLEGRPC_StateStatus>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: ShimmerBLEGRPC_ShimmerBLEByteServer.Method.ConnectShimmer.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DisconnectShimmer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_Request` message.
        ///   - serializer: A serializer for `ShimmerBLEGRPC_Request` messages.
        ///   - deserializer: A deserializer for `ShimmerBLEGRPC_Reply` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func disconnectShimmer<Result>(
            request: GRPCCore.ClientRequest<ShimmerBLEGRPC_Request>,
            serializer: some GRPCCore.MessageSerializer<ShimmerBLEGRPC_Request>,
            deserializer: some GRPCCore.MessageDeserializer<ShimmerBLEGRPC_Reply>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: ShimmerBLEGRPC_ShimmerBLEByteServer.Method.DisconnectShimmer.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "WriteBytesShimmer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_WriteBytes` message.
        ///   - serializer: A serializer for `ShimmerBLEGRPC_WriteBytes` messages.
        ///   - deserializer: A deserializer for `ShimmerBLEGRPC_Reply` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func writeBytesShimmer<Result>(
            request: GRPCCore.ClientRequest<ShimmerBLEGRPC_WriteBytes>,
            serializer: some GRPCCore.MessageSerializer<ShimmerBLEGRPC_WriteBytes>,
            deserializer: some GRPCCore.MessageDeserializer<ShimmerBLEGRPC_Reply>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: ShimmerBLEGRPC_ShimmerBLEByteServer.Method.WriteBytesShimmer.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SayHello" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `ShimmerBLEGRPC_Request` message.
        ///   - serializer: A serializer for `ShimmerBLEGRPC_Request` messages.
        ///   - deserializer: A deserializer for `ShimmerBLEGRPC_Reply` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func sayHello<Result>(
            request: GRPCCore.ClientRequest<ShimmerBLEGRPC_Request>,
            serializer: some GRPCCore.MessageSerializer<ShimmerBLEGRPC_Request>,
            deserializer: some GRPCCore.MessageDeserializer<ShimmerBLEGRPC_Reply>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: ShimmerBLEGRPC_ShimmerBLEByteServer.Method.SayHello.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension ShimmerBLEGRPC_ShimmerBLEByteServer.ClientProtocol {
    /// Call the "GetDataStream" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > lient asking for data
    ///
    /// - Parameters:
    ///   - request: A request containing a single `ShimmerBLEGRPC_StreamRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getDataStream<Result>(
        request: GRPCCore.ClientRequest<ShimmerBLEGRPC_StreamRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<ShimmerBLEGRPC_ObjectClusterByteArray>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.getDataStream(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<ShimmerBLEGRPC_StreamRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<ShimmerBLEGRPC_ObjectClusterByteArray>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetTestDataStream" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > lient asking for data
    ///
    /// - Parameters:
    ///   - request: A request containing a single `ShimmerBLEGRPC_StreamRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getTestDataStream<Result>(
        request: GRPCCore.ClientRequest<ShimmerBLEGRPC_StreamRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<ShimmerBLEGRPC_ObjectClusterByteArray>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.getTestDataStream(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<ShimmerBLEGRPC_StreamRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<ShimmerBLEGRPC_ObjectClusterByteArray>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SendDataStream" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > lient sending data
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `ShimmerBLEGRPC_ObjectClusterByteArray` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendDataStream<Result>(
        request: GRPCCore.StreamingClientRequest<ShimmerBLEGRPC_ObjectClusterByteArray>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.sendDataStream(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<ShimmerBLEGRPC_ObjectClusterByteArray>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<ShimmerBLEGRPC_Reply>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ConnectShimmer" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `ShimmerBLEGRPC_Request` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func connectShimmer<Result>(
        request: GRPCCore.ClientRequest<ShimmerBLEGRPC_Request>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<ShimmerBLEGRPC_StateStatus>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.connectShimmer(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<ShimmerBLEGRPC_Request>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<ShimmerBLEGRPC_StateStatus>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DisconnectShimmer" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `ShimmerBLEGRPC_Request` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func disconnectShimmer<Result>(
        request: GRPCCore.ClientRequest<ShimmerBLEGRPC_Request>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.disconnectShimmer(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<ShimmerBLEGRPC_Request>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<ShimmerBLEGRPC_Reply>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "WriteBytesShimmer" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `ShimmerBLEGRPC_WriteBytes` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func writeBytesShimmer<Result>(
        request: GRPCCore.ClientRequest<ShimmerBLEGRPC_WriteBytes>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.writeBytesShimmer(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<ShimmerBLEGRPC_WriteBytes>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<ShimmerBLEGRPC_Reply>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SayHello" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `ShimmerBLEGRPC_Request` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sayHello<Result>(
        request: GRPCCore.ClientRequest<ShimmerBLEGRPC_Request>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.sayHello(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<ShimmerBLEGRPC_Request>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<ShimmerBLEGRPC_Reply>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension ShimmerBLEGRPC_ShimmerBLEByteServer.ClientProtocol {
    /// Call the "GetDataStream" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > lient asking for data
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getDataStream<Result>(
        _ message: ShimmerBLEGRPC_StreamRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<ShimmerBLEGRPC_ObjectClusterByteArray>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<ShimmerBLEGRPC_StreamRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getDataStream(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetTestDataStream" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > lient asking for data
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getTestDataStream<Result>(
        _ message: ShimmerBLEGRPC_StreamRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<ShimmerBLEGRPC_ObjectClusterByteArray>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<ShimmerBLEGRPC_StreamRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getTestDataStream(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SendDataStream" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > lient sending data
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendDataStream<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<ShimmerBLEGRPC_ObjectClusterByteArray>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<ShimmerBLEGRPC_ObjectClusterByteArray>(
            metadata: metadata,
            producer: producer
        )
        return try await self.sendDataStream(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ConnectShimmer" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func connectShimmer<Result>(
        _ message: ShimmerBLEGRPC_Request,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<ShimmerBLEGRPC_StateStatus>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<ShimmerBLEGRPC_Request>(
            message: message,
            metadata: metadata
        )
        return try await self.connectShimmer(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DisconnectShimmer" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func disconnectShimmer<Result>(
        _ message: ShimmerBLEGRPC_Request,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<ShimmerBLEGRPC_Request>(
            message: message,
            metadata: metadata
        )
        return try await self.disconnectShimmer(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "WriteBytesShimmer" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func writeBytesShimmer<Result>(
        _ message: ShimmerBLEGRPC_WriteBytes,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<ShimmerBLEGRPC_WriteBytes>(
            message: message,
            metadata: metadata
        )
        return try await self.writeBytesShimmer(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SayHello" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sayHello<Result>(
        _ message: ShimmerBLEGRPC_Request,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<ShimmerBLEGRPC_Reply>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<ShimmerBLEGRPC_Request>(
            message: message,
            metadata: metadata
        )
        return try await self.sayHello(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}